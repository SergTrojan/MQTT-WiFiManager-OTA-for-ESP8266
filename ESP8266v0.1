#include <FS.h>                   //this needs to be first, or it all crashes and burns...

#include <ESP8266WiFi.h>          //https://github.com/esp8266/Arduino

//needed for MQTT
#include <PubSubClient.h>         //https://github.com/knolleary/pubsubclient

//needed for library
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>          //https://github.com/tzapu/WiFiManager

#include <ArduinoJson.h>          //https://github.com/bblanchon/ArduinoJson

//OTA
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

// ноги:
const int ciPin_RelayKettle = 4;  // Реле

// variables will change:
bool vbRelayState = false;


//define your default values here, if there are different values in config.json, they are overwritten.
char raw_mqtt_server[40]; // Имя сервера MQTT
char raw_mqtt_port[15]; // Порт для подключения к серверу MQTT
char raw_mqtt_user[15]; // Логин от сервер
char raw_mqtt_pass[15]; // Пароль от сервера

char *mqtt_server = raw_mqtt_server; // Имя сервера MQTT
//int mqtt_port;// =  int(atof(raw_mqtt_port)); // Порт для подключения к серверу MQTT
char *mqtt_user = raw_mqtt_user; // Логин от сервер
char *mqtt_pass = raw_mqtt_pass; // Пароль от сервера

//Для MQTT
WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

//flag for saving data
bool shouldSaveConfig = false;

//callback notifying us of the need to save config
void saveConfigCallback () {
  Serial.println("Should save config");
  shouldSaveConfig = true;
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_pass)) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println();

  //clean FS, for testing
  //SPIFFS.format();

  //read configuration from FS json
  Serial.println("mounting FS...");
  if (SPIFFS.begin()) {
    Serial.println("mounted file system");
    if (SPIFFS.exists("/config.json")) {
      //file exists, reading and loading
      Serial.println("reading config file");
      File configFile = SPIFFS.open("/config.json", "r");
      if (configFile) {
        Serial.println("opened config file");
        size_t size = configFile.size();
        // Allocate a buffer to store contents of the file.
        std::unique_ptr<char[]> buf(new char[size]);

        configFile.readBytes(buf.get(), size);
        DynamicJsonBuffer jsonBuffer;
        JsonObject& json = jsonBuffer.parseObject(buf.get());
        json.printTo(Serial);
        if (json.success()) {
          Serial.println("\nparsed json");
          strcpy(raw_mqtt_server, json["raw_mqtt_server"]);
          strcpy(raw_mqtt_port, json["raw_mqtt_port"]);
          strcpy(raw_mqtt_user, json["raw_mqtt_user"]);
          strcpy(raw_mqtt_pass, json["raw_mqtt_pass"]);
        } else {
          Serial.println("failed to load json config");
        }
        configFile.close();
      }
    }
  } else {
    Serial.println("failed to mount FS");
  }
  //end read



  // The extra parameters to be configured (can be either global or just in the setup)
  // After connecting, parameter.getValue() will get you the configured value
  // id/name placeholder/prompt default length
  WiFiManagerParameter custom_raw_mqtt_server("raw_server", "raw_mqtt server", raw_mqtt_server, 40);
  WiFiManagerParameter custom_raw_mqtt_port("raw_port", "raw_mqtt port", raw_mqtt_port, 15);
  WiFiManagerParameter custom_raw_mqtt_user("raw_mqttuser", "raw_mqtt user", raw_mqtt_user, 15);
  WiFiManagerParameter custom_raw_mqtt_pass("raw_mqttpass", "raw_mqtt pass", raw_mqtt_pass, 15);

  //WiFiManager
  //Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wifiManager;

  //set config save notify callback
  wifiManager.setSaveConfigCallback(saveConfigCallback);

  //set static ip
  //wifiManager.setSTAStaticIPConfig(IPAddress(10,0,1,99), IPAddress(10,0,1,1), IPAddress(255,255,255,0));

  //add all your parameters here
  wifiManager.addParameter(&custom_raw_mqtt_server);
  wifiManager.addParameter(&custom_raw_mqtt_port);
  wifiManager.addParameter(&custom_raw_mqtt_user);
  wifiManager.addParameter(&custom_raw_mqtt_pass);

  //reset settings - for testing
  //wifiManager.resetSettings();

  //set minimu quality of signal so it ignores AP's under that quality
  //defaults to 8%
  //wifiManager.setMinimumSignalQuality();

  //sets timeout until configuration portal gets turned off
  //useful to make it all retry or go to sleep
  //in seconds
  wifiManager.setTimeout(180);

  //fetches ssid and pass and tries to connect
  //if it does not connect it starts an access point with the specified name
  //here  "AutoConnectAP"
  //and goes into a blocking loop awaiting configuration
  if (!wifiManager.autoConnect("ESP8266-01", "12345678")) {
    Serial.println("failed to connect and hit timeout");
    delay(3000);
    //reset and try again, or maybe put it to deep sleep
    ESP.reset();
    delay(5000);
  }

  //if you get here you have connected to the WiFi
  Serial.println("connected...yeey :)");

  //read updated parameters
  strcpy(raw_mqtt_server, custom_raw_mqtt_server.getValue());
  strcpy(raw_mqtt_port, custom_raw_mqtt_port.getValue());
  strcpy(raw_mqtt_user, custom_raw_mqtt_user.getValue());
  strcpy(raw_mqtt_pass, custom_raw_mqtt_pass.getValue());

  //save the custom parameters to FS
  if (shouldSaveConfig) {
    Serial.println("saving config");
    DynamicJsonBuffer jsonBuffer;
    JsonObject& json = jsonBuffer.createObject();
    json["raw_mqtt_server"] = raw_mqtt_server;
    json["raw_mqtt_port"] = raw_mqtt_port;
    json["raw_mqtt_user"] = raw_mqtt_user;
    json["raw_mqtt_pass"] = raw_mqtt_pass;


    File configFile = SPIFFS.open("/config.json", "w");
    if (!configFile) {
      Serial.println("failed to open config file for writing");
    }

    json.printTo(Serial);
    json.printTo(configFile);
    configFile.close();
    //end save
  }

  //OTA
  // Hostname defaults to esp8266-[ChipID]
  //ArduinoOTA.setHostname("ESP8266-01");

  // No authentication by default
  ArduinoOTA.setPassword("P@ssw0rd");
  ArduinoOTA.begin();

  Serial.println("local ip");
  Serial.println(WiFi.localIP());

  mqtt_port =  int(atof(raw_mqtt_port)); // Порт для подключения к серверу MQTT

  Serial.println(mqtt_server);
  Serial.println(mqtt_port);
  Serial.println(mqtt_user);
  Serial.println(mqtt_pass);

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  //pinMode(ciPin_RelayKettle, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);


}


void loop() {
  ArduinoOTA.handle();
  // put your main code here, to run repeatedly:

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > value) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outTopic", msg);
  }
  //digitalWrite(ciPin_RelayKettle, vbRelayState);
  //digitalWrite(LED_BUILTIN, !vbRelayState);
}
